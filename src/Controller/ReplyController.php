<?php
declare(strict_types=1);

namespace App\Controller;

use Cake\Event\EventInterface;
use Cake\Mailer\Mailer;

/**
 * Reply Controller
 *
 * @property \App\Model\Table\ReplyTable $Reply
 * @property \App\Model\Table\TicketsTable $Tickets
 * @method \App\Model\Entity\Reply[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class ReplyController extends AppController
{
    //not work
//    public function initialize(): void
//    {
//        parent::initialize(); // TODO: Change the autogenerated stub
//        $roleID = $this->Auth->user('role_id');
//        if ($roleID == STAFF) {
//            $this->viewBuilder()->setLayout('userdefault');
//        }
//        elseif ($roleID == ASSISTANT) {
//            $this->viewBuilder()->setLayout('assistantdefault');
//        }
//        elseif ($roleID == ADMIN) {
//            $this->viewBuilder()->setLayout('default');
//        }
//        else  {
//            $this->viewBuilder()->setLayout('default');
//        }
//    }
//              Defind layout when click reply ticket
    public function beforeRender(EventInterface $event)
    {
        parent::beforeRender($event); // TODO: Change the autogenerated stub
        $roleID = $this->Auth->user('role_id');
        if ($roleID == STAFF) {
            $this->viewBuilder()->setLayout('userdefault');
        }
        elseif ($roleID == ASSISTANT) {
            $this->viewBuilder()->setLayout('assistantdefault');
        }
        elseif ($roleID == ADMIN) {
            $this->viewBuilder()->setLayout('default');
        }
        else  {
            $this->viewBuilder()->setLayout('default');
        }
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null|void Renders view
     */
    public function index($id)
    {
        $this->paginate = [
            'contain' => ['Tickets', 'Staffs'],
        ];
        $reply = $this->Reply->newEmptyEntity();
        $data = $this->request->getData();
        $data['Reply_id'] = 18;
        $data['Staff_id'] = $this->Auth->user('id');
        $data['ticket_id'] = (int) $id;
        $reply = $this->Reply->patchEntity($reply, $data);
        $ticket = $this->Reply->Tickets->get($data['ticket_id'], ['contain' => 'Staffs']);
//        dd($ticket);
        $submitBy = $this->Reply->Tickets->Staffs->get($ticket['submit_by']);
//        dd($submitBy);

        $ticketInfo = $this->Reply->Tickets->find()->where(['id'=>$data['ticket_id']])->toArray();
        $staffInfo = $this->Reply->Tickets->Staffs->get(['id'=>$data['Staff_id']]);

        if ($this->Reply->save($reply)) {
//            $this->replyAlertToAdmin($staffInfo['email'],$reply['id']);

            $this->replyAlertToUser($staffInfo['email'],$reply['id']);
//            $this->replyAlertToStaff($staffInfo['email'],$reply['id']);
            $this->Flash->success(('The reply has been saved.'));
        }
        $replies = $this->Reply->find()->contain(['Tickets', 'Staffs'])->where(['ticket_id' => $data['ticket_id']])->all();
//        dd($submitBy);
        $this->set(compact('replies','ticket','submitBy'));
    }
//    public function add($data)
//    {
//        $reply = $this->Reply->newEmptyEntity();
////        if ($this->request->is('post')) {
//            $data['Reply_id'] = 18;
//            $data['Staff_id'] = $this->Auth->user('id');
//            $data['ticket_id'] = (int) $data['ticket_id'];
//            $reply = $this->Reply->patchEntity($reply, $data);
////            dd($data);
//            if ($this->Reply->save($reply)) {
//                $this->Flash->success(('The reply has been saved.'));
//
//                return $this->redirect(['action' => 'index']);
//            }
//            $this->Flash->error(('The reply could not be saved. Please, try again.'));
////        }
//
//        $tickets = $this->Reply->Tickets->find('list', ['limit' => 200])->all();
//        $staffs = $this->Reply->Staffs->find('list', ['limit' => 200])->all();
//        $this->set(compact('reply', 'tickets', 'staffs'));
//
//    }

    /**
     * View method
     *
     * @param string|null $id Reply id.
     * @return \Cake\Http\Response|null|void Renders view
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $reply = $this->Reply->get($id, [
            'contain' => ['Tickets', 'Staffs'],
        ]);
        $this->set(compact('reply'));
    }
    /**
     * Add method
     *
     * @return \Cake\Http\Response|null|void Redirects on successful add, renders view otherwise.
     */


    /**
     * Edit method
     *
     * @param string|null $id Reply id.
     * @return \Cake\Http\Response|null|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $reply = $this->Reply->get($id, [
            'contain' => [],
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $reply = $this->Reply->patchEntity($reply, $this->request->getData());
            if ($this->Reply->save($reply)) {
                $this->Flash->success(__('The reply has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The reply could not be saved. Please, try again.'));
        }
        $tickets = $this->Reply->Tickets->find('list', ['limit' => 200])->all();
        $staffs = $this->Reply->Staffs->find('list', ['limit' => 200])->all();
        $this->set(compact('reply', 'tickets', 'staffs'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Reply id.
     * @return \Cake\Http\Response|null|void Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $reply = $this->Reply->get($id);
        if ($this->Reply->delete($reply)) {
            $this->Flash->success(__('The reply has been deleted.'));
        } else {
            $this->Flash->error(__('The reply could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }
    public function replyAlertToUser($staff,$id)
    {
        $user_id = $this->Reply->get($id);
        $user = $this->Reply->Tickets->get($user_id['ticket_id']);
//                dd($user_id->message);
        $userInfo = $this->Reply->Staffs->get($user_id['Staff_id']);

        $user1 = $this->Reply->Tickets->Staffs->get($user['staff_id']);
        if ($myEmail2 = $user1->email) {

            $mailer = new Mailer();
            $mailer->setTransport('gmail');
            $mailer
                ->setTo($myEmail2)
                ->setEmailFormat('html')
                ->setSubject('Help Desk_Reply Notification ðŸ””')
                ->setViewVars(['name'=>$userInfo->staffName, 'reply'=>$user_id->message])

                ->viewBuilder()
                ->setTemplate('replyNotificationToUser');

           $mailer->deliver();

        }
    }

//    public function replyAlertToAdmin($staff,$id)
//    {
//        $user_id = $this->Reply->get($id);
//        $reply = $this->Reply->get($user_id['Staff_id']);
//        $user = $this->Reply->Tickets->get($user_id['ticket_id']);
////                dd($user_id->message);
//        $userInfo = $this->Reply->Staffs->get($user_id['Staff_id']);
//
//
//        $user1 = $this->Reply->Tickets->Staffs->get($user['staff_id']);
////        $submitByInfo =$user_id->staff->get();
////        dd($submitByInfo);
//        $myEmail2 = 'rathmuny85@gmail.com';
//
//            $mailer = new Mailer();
//            $mailer->setTransport('gmail');
//            $mailer
//                ->setTo($myEmail2)
//                ->setEmailFormat('html')
//                ->setSubject('Help Desk_Reply Notification ðŸ””')
//                ->setViewVars(['name'=>$userInfo->staffName, 'reply'=>$user_id->message])
//
//                ->viewBuilder()
//                ->setTemplate('replyNotificationToAdmin');
//
//            if ($mailer->deliver()) {
//                $this->Flash->success('Reply notification has been sent to admin email');
//            }
//
//        }


}
